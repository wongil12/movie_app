{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","props","alt","title","src","poster","className","MovieGenres","genres","Movie","map","v","index","key","text","synopsis","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","res","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sVA6BA,SAASA,EAAYC,GACjB,OACI,yBAAKC,IAAKD,EAAMC,IAAKC,MAAOF,EAAMC,IAAKE,IAAKH,EAAMI,OAAQC,UAAU,kBAG5E,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,OAClB,OACI,0BAAMF,UAAU,iBAAiBE,GAS1BC,MAxCf,SAAeR,GACX,OACI,yBAAKK,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACN,EAAD,CAAaK,OAAQJ,EAAMI,OAAQH,IAAKD,EAAME,SAElD,yBAAKG,UAAU,iBACX,4BAAKL,EAAME,OACX,yBAAKG,UAAU,iBACVL,EAAMO,OAAOE,KAAI,SAACC,EAAGC,GAAJ,OAAY,kBAACL,EAAD,CAAaC,OAAQG,EAAGE,IAAKD,QAE/D,yBAAKN,UAAU,mBACX,kBAAC,IAAD,CACIQ,KAAMb,EAAMc,SACZC,QAAQ,IACRC,SAAS,MACTC,UAAU,OACVC,QAAQ,gBCuBjBC,E,2MAvCbC,MAAQ,G,EAIRC,cAAgB,WAUd,OATgB,EAAKD,MAAME,OAAOb,KAAI,SAAAC,GACpC,OAAO,kBAAC,EAAD,CACLR,MAAOQ,EAAER,MACTE,OAAQM,EAAEa,mBACVX,IAAKF,EAAEc,GACPjB,OAAQG,EAAEH,OACVO,SAAUJ,EAAEI,e,EAKlBW,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLL,EADK,OAEX,EAAKM,SAAS,CACZN,WAHS,2C,EAMbK,SAAW,WACT,OAAOE,MAAM,yDACZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAApB,GAAC,OAAGA,EAAEuB,KAAKX,UAChBY,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFAxB1BG,KAAKb,e,+BA0BG,IACDH,EAAUgB,KAAKlB,MAAfE,OACP,OACE,yBAAKjB,UAAWiB,EAAS,MAAQ,gBAE7BA,EAASgB,KAAKjB,gBAAkB,e,GAnCxBkB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.89e666e2.chunk.js","sourcesContent":["import React from 'react';\r\nimport ProtoTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nfunction Movie(props) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={props.poster} alt={props.title}/>\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{props.title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {props.genres.map((v, index)=><MovieGenres genres={v} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={props.synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight=\"true\"\r\n                        basedOn='letters'\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nfunction MoviePoster(props) {\r\n    return (\r\n        <img alt={props.alt} title={props.alt} src={props.poster} className=\"Movie__Poster\"/>\r\n    )\r\n}\r\nfunction MovieGenres({genres}) {\r\n    return (\r\n        <span className=\"Movie__Genres\">{genres}</span>\r\n    )\r\n}\r\nMovie.propTypes = {\r\n    title : ProtoTypes.string.isRequired,\r\n    poster : ProtoTypes.string.isRequired,\r\n    genres : ProtoTypes.array.isRequired,\r\n    synopsis : ProtoTypes.string.isRequired\r\n}\r\nexport default Movie;","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  \n  state = {}\n  componentDidMount() {\n    this._getMovies();\n  }\n  _renderMovies = () => {\n     const movies = this.state.movies.map(v => {\n      return <Movie\n        title={v.title}\n        poster={v.medium_cover_image}\n        key={v.id}\n        genres={v.genres}\n        synopsis={v.synopsis}\n      />\n    })\n    return movies\n  }\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n  _callApi = () => {\n    return fetch(\"https://yts.lt/api/v2/list_movies.json?sort_by=rating\")\n    .then(res => res.json())\n    .then(v=> v.data.movies)\n    .catch(err => console.log(err))\n  }\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {\n          movies ? this._renderMovies() : \"Loading\"\n        }\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}